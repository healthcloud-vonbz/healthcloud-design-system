{"version":3,"file":"index94.js","sources":["../node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js"],"sourcesContent":["import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n"],"names":["Hour1to12Parser","Parser","__publicField","dateString","token","match","parseNumericPattern","numericPatterns","parseNDigits","_date","value","date","_flags","isPM"],"mappings":";;;;;;AAKO,MAAMA,UAAwBC,EAAO;AAAA,EAArC;AAAA;AACL,IAAAC,EAAA,kBAAW;AA6BX,IAAAA,EAAA,4BAAqB,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG;AAAA;AAAA,EA3B7C,MAAMC,GAAYC,GAAOC,GAAO;AAC9B,YAAQD,GAAK;AAAA,MACX,KAAK;AACH,eAAOE,EAAoBC,EAAgB,SAASJ,CAAU;AAAA,MAChE,KAAK;AACH,eAAOE,EAAM,cAAcF,GAAY,EAAE,MAAM,OAAM,CAAE;AAAA,MACzD;AACE,eAAOK,EAAaJ,EAAM,QAAQD,CAAU;AAAA,IAC/C;AAAA,EACF;AAAA,EAED,SAASM,GAAOC,GAAO;AACrB,WAAOA,KAAS,KAAKA,KAAS;AAAA,EAC/B;AAAA,EAED,IAAIC,GAAMC,GAAQF,GAAO;AACvB,UAAMG,IAAOF,EAAK,SAAQ,KAAM;AAChC,WAAIE,KAAQH,IAAQ,KAClBC,EAAK,SAASD,IAAQ,IAAI,GAAG,GAAG,CAAC,IACxB,CAACG,KAAQH,MAAU,KAC5BC,EAAK,SAAS,GAAG,GAAG,GAAG,CAAC,IAExBA,EAAK,SAASD,GAAO,GAAG,GAAG,CAAC,GAEvBC;AAAA,EACR;AAGH;","x_google_ignoreList":[0]}