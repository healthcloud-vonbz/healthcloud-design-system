{"version":3,"file":"index80.js","sources":["../node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js"],"sourcesContent":["import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n"],"names":["StandAloneQuarterParser","Parser","__publicField","dateString","token","match","parseNDigits","_date","value","date","_flags"],"mappings":";;;;;AAIO,MAAMA,UAAgCC,EAAO;AAAA,EAA7C;AAAA;AACL,IAAAC,EAAA,kBAAW;AA4DX,IAAAA,EAAA,4BAAqB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA;AAAA,EAzEE,MAAMC,GAAYC,GAAOC,GAAO;AAC9B,YAAQD,GAAK;AAAA,MAEX,KAAK;AAAA,MACL,KAAK;AACH,eAAOE,EAAaF,EAAM,QAAQD,CAAU;AAAA,MAE9C,KAAK;AACH,eAAOE,EAAM,cAAcF,GAAY,EAAE,MAAM,UAAS,CAAE;AAAA,MAE5D,KAAK;AACH,eACEE,EAAM,QAAQF,GAAY;AAAA,UACxB,OAAO;AAAA,UACP,SAAS;AAAA,QACrB,CAAW,KACDE,EAAM,QAAQF,GAAY;AAAA,UACxB,OAAO;AAAA,UACP,SAAS;AAAA,QACrB,CAAW;AAAA,MAIL,KAAK;AACH,eAAOE,EAAM,QAAQF,GAAY;AAAA,UAC/B,OAAO;AAAA,UACP,SAAS;AAAA,QACnB,CAAS;AAAA,MAEH,KAAK;AAAA,MACL;AACE,eACEE,EAAM,QAAQF,GAAY;AAAA,UACxB,OAAO;AAAA,UACP,SAAS;AAAA,QACrB,CAAW,KACDE,EAAM,QAAQF,GAAY;AAAA,UACxB,OAAO;AAAA,UACP,SAAS;AAAA,QACrB,CAAW,KACDE,EAAM,QAAQF,GAAY;AAAA,UACxB,OAAO;AAAA,UACP,SAAS;AAAA,QACrB,CAAW;AAAA,IAEN;AAAA,EACF;AAAA,EAED,SAASI,GAAOC,GAAO;AACrB,WAAOA,KAAS,KAAKA,KAAS;AAAA,EAC/B;AAAA,EAED,IAAIC,GAAMC,GAAQF,GAAO;AACvB,WAAAC,EAAK,UAAUD,IAAQ,KAAK,GAAG,CAAC,GAChCC,EAAK,SAAS,GAAG,GAAG,GAAG,CAAC,GACjBA;AAAA,EACR;AAkBH;","x_google_ignoreList":[0]}