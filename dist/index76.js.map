{"version":3,"file":"index76.js","sources":["../node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js"],"sourcesContent":["import { getWeekYear } from \"../../../getWeekYear.js\";\n\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n"],"names":["LocalWeekYearParser","Parser","__publicField","dateString","token","match","valueCallback","year","mapValue","parseNDigits","_date","value","date","flags","options","currentYear","getWeekYear","normalizedTwoDigitYear","normalizeTwoDigitYear","startOfWeek"],"mappings":";;;;;;;AAQO,MAAMA,UAA4BC,EAAO;AAAA,EAAzC;AAAA;AACL,IAAAC,EAAA,kBAAW;AAmDX,IAAAA,EAAA,4BAAqB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA;AAAA,EA/DE,MAAMC,GAAYC,GAAOC,GAAO;AAC9B,UAAMC,IAAgB,CAACC,OAAU;AAAA,MAC/B,MAAAA;AAAA,MACA,gBAAgBH,MAAU;AAAA,IAChC;AAEI,YAAQA,GAAK;AAAA,MACX,KAAK;AACH,eAAOI,EAASC,EAAa,GAAGN,CAAU,GAAGG,CAAa;AAAA,MAC5D,KAAK;AACH,eAAOE;AAAA,UACLH,EAAM,cAAcF,GAAY;AAAA,YAC9B,MAAM;AAAA,UAClB,CAAW;AAAA,UACDG;AAAA,QACV;AAAA,MACM;AACE,eAAOE,EAASC,EAAaL,EAAM,QAAQD,CAAU,GAAGG,CAAa;AAAA,IACxE;AAAA,EACF;AAAA,EAED,SAASI,GAAOC,GAAO;AACrB,WAAOA,EAAM,kBAAkBA,EAAM,OAAO;AAAA,EAC7C;AAAA,EAED,IAAIC,GAAMC,GAAOF,GAAOG,GAAS;AAC/B,UAAMC,IAAcC,EAAYJ,GAAME,CAAO;AAE7C,QAAIH,EAAM,gBAAgB;AACxB,YAAMM,IAAyBC;AAAA,QAC7BP,EAAM;AAAA,QACNI;AAAA,MACR;AACM,aAAAH,EAAK;AAAA,QACHK;AAAA,QACA;AAAA,QACAH,EAAQ;AAAA,MAChB,GACMF,EAAK,SAAS,GAAG,GAAG,GAAG,CAAC,GACjBO,EAAYP,GAAME,CAAO;AAAA,IACjC;AAED,UAAMP,IACJ,EAAE,SAASM,MAAUA,EAAM,QAAQ,IAAIF,EAAM,OAAO,IAAIA,EAAM;AAChE,WAAAC,EAAK,YAAYL,GAAM,GAAGO,EAAQ,qBAAqB,GACvDF,EAAK,SAAS,GAAG,GAAG,GAAG,CAAC,GACjBO,EAAYP,GAAME,CAAO;AAAA,EACjC;AAiBH;","x_google_ignoreList":[0]}