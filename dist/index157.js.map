{"version":3,"file":"index157.js","sources":["../node_modules/date-fns/parse/_lib/utils.js"],"sourcesContent":["import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.js\";\n\nimport { numericPatterns } from \"./constants.js\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n"],"names":["mapValue","parseFnResult","mapFn","parseNumericPattern","pattern","dateString","matchResult","parseTimezonePattern","sign","hours","minutes","seconds","millisecondsInHour","millisecondsInMinute","millisecondsInSecond","parseAnyDigitsSigned","numericPatterns","parseNDigits","n","parseNDigitsSigned","dayPeriodEnumToHours","dayPeriod","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","result","rangeEnd","rangeEndCentury","isPreviousCentury","isLeapYearIndex","year"],"mappings":"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","x_google_ignoreList":[0]}