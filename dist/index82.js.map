{"version":3,"file":"index82.js","sources":["../node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js"],"sourcesContent":["import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n"],"names":["StandAloneMonthParser","Parser","__publicField","dateString","token","match","valueCallback","value","mapValue","parseNumericPattern","numericPatterns","parseNDigits","_date","date","_flags"],"mappings":";;;;;;AAKO,MAAMA,UAA8BC,EAAO;AAAA,EAA3C;AAAA;AACL,IAAAC,EAAA,kBAAW;AA+DX,IAAAA,EAAA,4BAAqB;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA;AAAA,EA3EE,MAAMC,GAAYC,GAAOC,GAAO;AAC9B,UAAMC,IAAgB,CAACC,MAAUA,IAAQ;AAEzC,YAAQH,GAAK;AAAA,MAEX,KAAK;AACH,eAAOI;AAAA,UACLC,EAAoBC,EAAgB,OAAOP,CAAU;AAAA,UACrDG;AAAA,QACV;AAAA,MAEM,KAAK;AACH,eAAOE,EAASG,EAAa,GAAGR,CAAU,GAAGG,CAAa;AAAA,MAE5D,KAAK;AACH,eAAOE;AAAA,UACLH,EAAM,cAAcF,GAAY;AAAA,YAC9B,MAAM;AAAA,UAClB,CAAW;AAAA,UACDG;AAAA,QACV;AAAA,MAEM,KAAK;AACH,eACED,EAAM,MAAMF,GAAY;AAAA,UACtB,OAAO;AAAA,UACP,SAAS;AAAA,QACrB,CAAW,KACDE,EAAM,MAAMF,GAAY,EAAE,OAAO,UAAU,SAAS,cAAc;AAAA,MAItE,KAAK;AACH,eAAOE,EAAM,MAAMF,GAAY;AAAA,UAC7B,OAAO;AAAA,UACP,SAAS;AAAA,QACnB,CAAS;AAAA,MAEH,KAAK;AAAA,MACL;AACE,eACEE,EAAM,MAAMF,GAAY,EAAE,OAAO,QAAQ,SAAS,cAAc,KAChEE,EAAM,MAAMF,GAAY;AAAA,UACtB,OAAO;AAAA,UACP,SAAS;AAAA,QACrB,CAAW,KACDE,EAAM,MAAMF,GAAY,EAAE,OAAO,UAAU,SAAS,cAAc;AAAA,IAEvE;AAAA,EACF;AAAA,EAED,SAASS,GAAOL,GAAO;AACrB,WAAOA,KAAS,KAAKA,KAAS;AAAA,EAC/B;AAAA,EAED,IAAIM,GAAMC,GAAQP,GAAO;AACvB,WAAAM,EAAK,SAASN,GAAO,CAAC,GACtBM,EAAK,SAAS,GAAG,GAAG,GAAG,CAAC,GACjBA;AAAA,EACR;AAiBH;","x_google_ignoreList":[0]}