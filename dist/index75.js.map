{"version":3,"file":"index75.js","sources":["../node_modules/date-fns/parse/_lib/parsers/YearParser.js"],"sourcesContent":["import { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n"],"names":["YearParser","Parser","__publicField","dateString","token","match","valueCallback","year","mapValue","parseNDigits","_date","value","date","flags","currentYear","normalizedTwoDigitYear","normalizeTwoDigitYear"],"mappings":";;;;;AAYO,MAAMA,UAAmBC,EAAO;AAAA,EAAhC;AAAA;AACL,IAAAC,EAAA,kBAAW;AACX,IAAAA,EAAA,4BAAqB,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAAA;AAAA,EAEtE,MAAMC,GAAYC,GAAOC,GAAO;AAC9B,UAAMC,IAAgB,CAACC,OAAU;AAAA,MAC/B,MAAAA;AAAA,MACA,gBAAgBH,MAAU;AAAA,IAChC;AAEI,YAAQA,GAAK;AAAA,MACX,KAAK;AACH,eAAOI,EAASC,EAAa,GAAGN,CAAU,GAAGG,CAAa;AAAA,MAC5D,KAAK;AACH,eAAOE;AAAA,UACLH,EAAM,cAAcF,GAAY;AAAA,YAC9B,MAAM;AAAA,UAClB,CAAW;AAAA,UACDG;AAAA,QACV;AAAA,MACM;AACE,eAAOE,EAASC,EAAaL,EAAM,QAAQD,CAAU,GAAGG,CAAa;AAAA,IACxE;AAAA,EACF;AAAA,EAED,SAASI,GAAOC,GAAO;AACrB,WAAOA,EAAM,kBAAkBA,EAAM,OAAO;AAAA,EAC7C;AAAA,EAED,IAAIC,GAAMC,GAAOF,GAAO;AACtB,UAAMG,IAAcF,EAAK;AAEzB,QAAID,EAAM,gBAAgB;AACxB,YAAMI,IAAyBC;AAAA,QAC7BL,EAAM;AAAA,QACNG;AAAA,MACR;AACM,aAAAF,EAAK,YAAYG,GAAwB,GAAG,CAAC,GAC7CH,EAAK,SAAS,GAAG,GAAG,GAAG,CAAC,GACjBA;AAAA,IACR;AAED,UAAML,IACJ,EAAE,SAASM,MAAUA,EAAM,QAAQ,IAAIF,EAAM,OAAO,IAAIA,EAAM;AAChE,WAAAC,EAAK,YAAYL,GAAM,GAAG,CAAC,GAC3BK,EAAK,SAAS,GAAG,GAAG,GAAG,CAAC,GACjBA;AAAA,EACR;AACH;","x_google_ignoreList":[0]}