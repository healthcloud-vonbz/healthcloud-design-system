{"version":3,"file":"index138.js","sources":["../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange: (event) => _registerProps.current.onChange({\n            target: {\n                value: getEventValue(event),\n                name: name,\n            },\n            type: EVENTS.CHANGE,\n        }),\n        onBlur: () => _registerProps.current.onBlur({\n            target: {\n                value: get(control._formValues, name),\n                name: name,\n            },\n            type: EVENTS.BLUR,\n        }),\n        ref: (elm) => {\n            const field = get(control._fields, name);\n            if (field && elm) {\n                field._f.ref = {\n                    focus: () => elm.focus(),\n                    select: () => elm.select(),\n                    setCustomValidity: (message) => elm.setCustomValidity(message),\n                    reportValidity: () => elm.reportValidity(),\n                };\n            }\n        },\n    }), [\n        name,\n        control._formValues,\n        disabled,\n        formState.disabled,\n        value,\n        control._fields,\n    ]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._updateDisabledField({\n            disabled,\n            fields: control._fields,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            const disabledField = !!(get(_fields, name) &&\n                get(_fields, name)._f &&\n                get(_fields, name)._f.disabled);\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n                isCurrentFieldPristine || disabledField\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.dirtyFields &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            (_proxyFormState.touchedFields &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid) {\n                    if (_options.mode === 'onBlur' && isBlurEvent) {\n                        _updateValid();\n                    }\n                    else if (!isBlurEvent) {\n                        _updateValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n            updateTouchAndDirty(name, getFieldValue(field ? field._f : get(fields, name)._f), false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","isFileListInstance","key","compact","isUndefined","val","get","object","path","defaultValue","result","isBoolean","isKey","stringToPath","input","set","index","tempPath","length","lastIndex","newValue","objValue","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","FormProvider","props","children","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","isEmptyObject","shouldRenderFormState","formStateData","_proxyFormState","updateFormState","convertToArrayPayload","shouldSubscribeByName","signalName","exact","currentName","useSubscribe","_props","subscription","useFormState","methods","disabled","_mounted","_localProxyFormState","_name","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","useWatch","updateValue","useController","shouldUnregister","isArrayField","_registerProps","fieldState","field","elm","message","_shouldUnregisterField","updateMounted","Controller","appendErrors","validateAllFieldCriteria","errors","type","getValidationModes","mode","isWatched","isBlurEvent","watchName","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","_f","currentField","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","isMessage","isRadioInput","isRegex","defaultResult","validResult","getCheckboxValue","options","values","option","defaultReturn","getRadioValue","previous","getValidateError","ref","getValueAndMessage","validationData","validateField","disabledFieldNames","shouldUseNativeValidation","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","createSubject","_observers","observer","o","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isMultipleSelect","live","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","valueAsDate","setValueAs","getFieldValue","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","foundError","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","callback","wait","_updateValid","shouldUpdateValid","isValid","_executeSchema","executeBuiltInValidation","_updateIsValidating","isValidating","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","isPromiseFunction","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","onChange","target","isFieldValueUpdated","getCurrentFieldValue","_updateIsFieldValueUpdated","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","watch","payload","_updateDisabledField","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","fieldsToCheck","form","reset","useForm","_formControl","_values","isDirty","state"],"mappings":"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","x_google_ignoreList":[0]}